import numpy as np
import soundfile as sf
import matplotlib.pyplot as plt
from scipy import signal

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
# –ò–º—è –≤–∞—à–µ–≥–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
INPUT_FILENAME = "assets/sample.wav"
# –ò–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
ORIGINAL_SPECTROGRAM_FILENAME = "output/lab9/spectrogram_original.png"
DENOISED_SPECTROGRAM_FILENAME = "output/lab9/spectrogram_denoised.png"
DENOISED_AUDIO_FILENAME = "output/lab9/instrument_denoised.wav"

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–∫–æ–Ω–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –§—É—Ä—å–µ (STFT)
WINDOW_TYPE = "hann"
WINDOW_SIZE_SAMPLES = 2048  # –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –≤ —Å—ç–º–ø–ª–∞—Ö
OVERLAP_SAMPLES = 1024  # –†–∞–∑–º–µ—Ä –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è –æ–∫–æ–Ω –≤ —Å—ç–º–ø–ª–∞—Ö

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏
TIME_WINDOW_S = 0.1  # –®–∞–≥ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (Œît)
FREQ_WINDOW_HZ = 50  # –®–∞–≥ –ø–æ —á–∞—Å—Ç–æ—Ç–µ –≤ –≥–µ—Ä—Ü–∞—Ö (Œîf)

# –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ —Å —à—É–º–æ–º –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
NOISE_DURATION_S = 1.0


def plot_spectrogram(freqs, times, Sxx, title, filename):
    """–°—Ç—Ä–æ–∏—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—É."""
    plt.figure(figsize=(12, 6))

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º pcolormesh –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. np.abs(Sxx) - –º–∞–≥–Ω–∏—Ç—É–¥–∞
    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞–ª–µ–Ω—å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (1e-9), —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å log(0)
    plt.pcolormesh(times, freqs, 10 * np.log10(np.abs(Sxx) + 1e-9), shading="gouraud")

    plt.ylabel("–ß–∞—Å—Ç–æ—Ç–∞ [–ì—Ü]")
    plt.xlabel("–í—Ä–µ–º—è [—Å]")
    plt.title(title)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫—É—é —à–∫–∞–ª—É –¥–ª—è –æ—Å–∏ —á–∞—Å—Ç–æ—Ç
    plt.yscale("log")
    plt.ylim(20, 20000)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —á–∞—Å—Ç–æ—Ç –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏

    plt.colorbar(label="–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å [–¥–ë]")
    plt.tight_layout()
    plt.savefig(filename)
    print(f"‚úÖ –°–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {filename}")
    # plt.show() # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–∑—É


def find_max_energy_region(Sxx, freqs, times, fs, time_window_s, freq_window_hz):
    """–ù–∞—Ö–æ–¥–∏—Ç –æ–±–ª–∞—Å—Ç—å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–µ–π –Ω–∞ —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º–µ."""
    # –≠–Ω–µ—Ä–≥–∏—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç—É –º–∞–≥–Ω–∏—Ç—É–¥—ã
    energy = np.abs(Sxx) ** 2

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —á–∞—Å—Ç–æ—Ç–Ω—ã–µ –æ–∫–Ω–∞ –∏–∑ —Å–µ–∫—É–Ω–¥/–ì—Ü –≤ –∏–Ω–¥–µ–∫—Å—ã –º–∞—Å—Å–∏–≤–∞
    time_step_samples = int(time_window_s * fs / OVERLAP_SAMPLES)
    freq_step_indices = int(freq_window_hz * WINDOW_SIZE_SAMPLES / fs)

    max_energy = 0
    best_time_idx = 0
    best_freq_idx = 0

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º–µ —Å –∑–∞–¥–∞–Ω–Ω—ã–º —à–∞–≥–æ–º
    for time_idx in range(0, energy.shape[1] - time_step_samples, time_step_samples):
        for freq_idx in range(
            0, energy.shape[0] - freq_step_indices, freq_step_indices
        ):

            # –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º–∞—Ä–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é –≤ —Ç–µ–∫—É—â–µ–º –æ–∫–Ω–µ
            window = energy[
                freq_idx : freq_idx + freq_step_indices,
                time_idx : time_idx + time_step_samples,
            ]
            current_energy = np.sum(window)

            if current_energy > max_energy:
                max_energy = current_energy
                best_time_idx = time_idx
                best_freq_idx = freq_idx

    # –ù–∞—Ö–æ–¥–∏–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –≤—Ä–µ–º—è –∏ —á–∞—Å—Ç–æ—Ç—É –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞
    center_time = times[best_time_idx + time_step_samples // 2]
    center_freq = freqs[best_freq_idx + freq_step_indices // 2]

    return center_time, center_freq, max_energy


# --- –û–°–ù–û–í–ù–û–ô –°–ö–†–ò–ü–¢ ---

if __name__ == "__main__":
    try:
        # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
        audio, fs = sf.read(INPUT_FILENAME)
        print(f"–ê—É–¥–∏–æ—Ñ–∞–π–ª '{INPUT_FILENAME}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
        print(f"–ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏: {fs} –ì—Ü, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ç–º–ø–ª–æ–≤: {len(audio)}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–æ–Ω–æ. –ï—Å–ª–∏ —Å—Ç–µ—Ä–µ–æ, –±–µ—Ä–µ–º –ª–µ–≤—ã–π –∫–∞–Ω–∞–ª.
        if audio.ndim > 1:
            print("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å—Ç–µ—Ä–µ–æ, –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–µ–≤—ã–π –∫–∞–Ω–∞–ª.")
            audio = audio[:, 0]

    except FileNotFoundError:
        print(
            f"üõë –û—à–∏–±–∫–∞: –§–∞–π–ª '{INPUT_FILENAME}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ, —á—Ç–æ –∏ —Å–∫—Ä–∏–ø—Ç."
        )
        exit()
    except Exception as e:
        print(f"üõë –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        exit()

    # 2. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
    print("\n--- –ê–Ω–∞–ª–∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ ---")
    freqs, times, Sxx_original = signal.stft(
        audio,
        fs=fs,
        window=WINDOW_TYPE,
        nperseg=WINDOW_SIZE_SAMPLES,
        noverlap=OVERLAP_SAMPLES,
    )
    plot_spectrogram(
        freqs,
        times,
        Sxx_original,
        "–°–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞",
        ORIGINAL_SPECTROGRAM_FILENAME,
    )

    # 3. –û—Ü–µ–Ω–∫–∞ –∏ –≤—ã—á–∏—Ç–∞–Ω–∏–µ —à—É–º–∞
    print("\n--- –ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ —à—É–º–∞ ---")
    # –í—ã–¥–µ–ª—è–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Å —à—É–º–æ–º –∏–∑ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏
    noise_samples = int(NOISE_DURATION_S * fs)
    noise_part = audio[:noise_samples]

    # STFT –¥–ª—è —à—É–º–æ–≤–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
    _, _, Sxx_noise = signal.stft(
        noise_part,
        fs=fs,
        window=WINDOW_TYPE,
        nperseg=WINDOW_SIZE_SAMPLES,
        noverlap=OVERLAP_SAMPLES,
    )

    # –û—Ü–µ–Ω–∏–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —à—É–º–∞ –ø–æ —á–∞—Å—Ç–æ—Ç–∞–º
    mean_noise = np.mean(np.abs(Sxx_noise), axis=1, keepdims=True)

    # –í—ã—á–∏—Ç–∞–µ–º —Å–ø–µ–∫—Ç—Ä —à—É–º–∞ –∏–∑ —Å–ø–µ–∫—Ç—Ä–∞ —Å–∏–≥–Ω–∞–ª–∞ (—Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–æ–µ –≤—ã—á–∏—Ç–∞–Ω–∏–µ)
    Sxx_denoised_magnitude = np.abs(Sxx_original) - mean_noise
    # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    Sxx_denoised_magnitude = np.maximum(Sxx_denoised_magnitude, 0)

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–∑—É –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
    phase = np.angle(Sxx_original)
    Sxx_denoised = Sxx_denoised_magnitude * np.exp(1j * phase)

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –æ—á–∏—â–µ–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
    plot_spectrogram(
        freqs,
        times,
        Sxx_denoised,
        "–°–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ—Å–ª–µ –≤—ã—á–∏—Ç–∞–Ω–∏—è —à—É–º–∞",
        DENOISED_SPECTROGRAM_FILENAME,
    )

    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤–æ–π –¥–æ—Ä–æ–∂–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    _, audio_denoised = signal.istft(
        Sxx_denoised,
        fs=fs,
        window=WINDOW_TYPE,
        nperseg=WINDOW_SIZE_SAMPLES,
        noverlap=OVERLAP_SAMPLES,
    )
    sf.write(DENOISED_AUDIO_FILENAME, audio_denoised, fs)
    print(f"‚úÖ –û—á–∏—â–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {DENOISED_AUDIO_FILENAME}")
    print("–°—Ä–∞–≤–Ω–∏—Ç–µ –Ω–∞ —Å–ª—É—Ö –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏ –æ—á–∏—â–µ–Ω–Ω—ã–π —Ñ–∞–π–ª—ã.")

    # 4. –ü–æ–∏—Å–∫ –º–æ–º–µ–Ω—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π —ç–Ω–µ—Ä–≥–∏–µ–π
    print("\n--- –ü–æ–∏—Å–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏ ---")
    time_res, freq_res, max_e = find_max_energy_region(
        Sxx_original, freqs, times, fs, TIME_WINDOW_S, FREQ_WINDOW_HZ
    )
    print(f"–ù–∞–∏–±–æ–ª—å—à–∞—è —ç–Ω–µ—Ä–≥–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≤ –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏:")
    print(f"  -> –í—Ä–µ–º—è: {time_res:.2f} —Å")
    print(f"  -> –ß–∞—Å—Ç–æ—Ç–∞: {freq_res:.2f} –ì—Ü")
